/*
 * @Description: Task of Servos control
 * @Author: qianwan
 * @Date: 2023-12-25 11:44:40
 * @LastEditTime: 2024-05-23 17:05:08
 * @LastEditors: qianwan
 */
#pragma once
#ifndef TASK_SERVO_H
#define TASK_SERVO_H

#include "arm_math.h"

#define LEG_MAX_LEN 0.350f
#define LEG_MIN_LEN 0.150f
#define LEG_START_LEN 0.150f

#define V_ACCEL 1.2f
#define V_STOP 2.0f
#define V_MAX 1.0f
#define V_LIMIT_SCOPE 10.0f
#define V_LIMIT_LEN 0.25f

extern uint8_t ID_T;
namespace TASK_CONTROL {

    class cPID_Len {
    protected:
        float _kp;
        float _kd;
        float _dt;
        float _max;
        float _min;
        float _ref;
        float _out;
    public:
        void SetParam(float kp, float kd, float max, float min) {
            _kp = kp;
            _kd = kd;
            _max = max;
            _min = min;
        }

        void SetRef(float ref) {
            _ref = ref;
        }

        float Out() {
            return _out;
        }

        float Calculate(float x, float x_dot, float dt) {
            float out_val;
            out_val = _kp * (_ref - x) + x_dot * _kd / dt;
            if (out_val > _max) {
                out_val = _max;
            } else if (out_val < _min) {
                out_val = _min;
            }
            _out = out_val;
            return out_val;
        }
    };

    class cLegUpdate {
    protected:
        float _length;
        float _path;
    public:
        cLegUpdate(float default_length, float path) : _length(default_length), _path(path) {}

        void Set_Length(float length) {
            _length = length;
        }

        void Set_Path(float path) {
            _path = path;
        }

        float update_val(float new_val) {
            if (fabsf(new_val - _length) < 1.1f * _path) {
                _length = new_val;
            } else {
                if (new_val < _length) {
                    _length -= _path;
                } else {
                    _length += _path;
                }
            }
            return _length;
        }
    };

#define LQRRESOLUTION 0.005f
#define LQRKNUM 41

    /*行进控制*/
    class cLQR {
    protected:
        /*LQR -K matrix*/
        /*2N means normal LQR*/
        /*2N+1 means off-ground LQR*/
        float LQRKbuf[LQRKNUM][12] =
                {

                        //-K in Arm Math Matrix Order: K00 K01 K02 K03 K04 K05 K10 K11 K12 K13 K14 K15
                        // size(K) = 41	, step(L) = 0.005000
                        /* Normal -K	L=0.150000	R00=1.50	R11=14.00 */
                        {25.42564, 3.456158, 14.049151, 14.391810, -9.852201, -2.125276, -0.831902, -0.144220, -0.529962, -0.447995, -18.925108, -1.404379},
                        /* Normal -K	L=0.155000	R00=1.50	R11=14.00 */
                        {25.56862, 3.453633, 14.049277, 14.337639, -9.760743, -2.155507, -0.818758, -0.141090, -0.529604, -0.442562, -18.930047, -1.426524},
                        /* Normal -K	L=0.160000	R00=1.50	R11=14.00 */
                        {25.70627, 3.451315, 14.049333, 14.286485, -9.676558, -2.186701, -0.805835, -0.138090, -0.529444, -0.437474, -18.934576, -1.449036},
                        /* Normal -K	L=0.165000	R00=1.50	R11=14.00 */
                        {25.83889, 3.449194, 14.049321, 14.238098, -9.599217, -2.218794, -0.793136, -0.135213, -0.529479, -0.432716, -18.938725, -1.471900},
                        /* Normal -K	L=0.170000	R00=1.50	R11=14.00 */
                        {25.96680, 3.447263, 14.049241, 14.192256, -9.528326, -2.251726, -0.780659, -0.132449, -0.529707, -0.428273, -18.942518, -1.495101},
                        /* Normal -K	L=0.175000	R00=1.50	R11=14.00 */
                        {26.09028, 3.445512, 14.049094, 14.148759, -9.463525, -2.285445, -0.768407, -0.129793, -0.530124, -0.424129, -18.945982, -1.518624},
                        /* Normal -K	L=0.180000	R00=1.50	R11=14.00 */
                        {26.20958, 3.443934, 14.048882, 14.107427, -9.404481, -2.319901, -0.756378, -0.127236, -0.530727, -0.420273, -18.949135, -1.542456},
                        /* Normal -K	L=0.185000	R00=1.50	R11=14.00 */
                        {26.32494, 3.442523, 14.048605, 14.068099, -9.350885, -2.355048, -0.744573, -0.124773, -0.531510, -0.416690, -18.951999, -1.566583},
                        /* Normal -K	L=0.190000	R00=1.50	R11=14.00 */
                        {26.43659, 3.441271, 14.048266, 14.030631, -9.302453, -2.390845, -0.732991, -0.122398, -0.532469, -0.413371, -18.954590, -1.590992},
                        /* Normal -K	L=0.195000	R00=1.50	R11=14.00 */
                        {26.54471, 3.440171, 14.047865, 13.994889, -9.258922, -2.427254, -0.721632, -0.120105, -0.533601, -0.410303, -18.956924, -1.615670},
                        /* Normal -K	L=0.200000	R00=1.50	R11=14.00 */
                        {26.64950, 3.439218, 14.047404, 13.960755, -9.220046, -2.464238, -0.710494, -0.117890, -0.534900, -0.407477, -18.959016, -1.640606},
                        /* Normal -K	L=0.205000	R00=1.50	R11=14.00 */
                        {26.75113, 3.438405, 14.046884, 13.928119, -9.185597, -2.501767, -0.699578, -0.115748, -0.536363, -0.404882, -18.960879, -1.665788},
                        /* Normal -K	L=0.210000	R00=1.50	R11=14.00 */
                        {26.84976, 3.437727, 14.046305, 13.896883, -9.155362, -2.539808, -0.688882, -0.113675, -0.537984, -0.402510, -18.962525, -1.691205},
                        /* Normal -K	L=0.215000	R00=1.50	R11=14.00 */
                        {26.94556, 3.437178, 14.045670, 13.866955, -9.129143, -2.578335, -0.678405, -0.111667, -0.539758, -0.400351, -18.963966, -1.716846},
                        /* Normal -K	L=0.220000	R00=1.50	R11=14.00 */
                        {27.03864, 3.436755, 14.044978, 13.838253, -9.106752, -2.617319, -0.668147, -0.109721, -0.541683, -0.398399, -18.965210, -1.742700},
                        /* Normal -K	L=0.225000	R00=1.50	R11=14.00 */
                        {27.12915, 3.436450, 14.044232, 13.810701, -9.088015, -2.656738, -0.658105, -0.107833, -0.543752, -0.396645, -18.966269, -1.768758},
                        /* Normal -K	L=0.230000	R00=1.50	R11=14.00 */
                        {27.21722, 3.436262, 14.043432, 13.784228, -9.072767, -2.696568, -0.648280, -0.106000, -0.545962, -0.395082, -18.967150, -1.795010},
                        /* Normal -K	L=0.235000	R00=1.50	R11=14.00 */
                        {27.30294, 3.436183, 14.042578, 13.758770, -9.060854, -2.736788, -0.638669, -0.104219, -0.548309, -0.393703, -18.967861, -1.821448},
                        /* Normal -K	L=0.240000	R00=1.50	R11=14.00 */
                        {27.38644, 3.436212, 14.041673, 13.734268, -9.052129, -2.777377, -0.629273, -0.102488, -0.550787, -0.392501, -18.968410, -1.848062},
                        /* Normal -K	L=0.245000	R00=1.50	R11=14.00 */
                        {27.46781, 3.436344, 14.040716, 13.710666, -9.046454, -2.818317, -0.620088, -0.100804, -0.553394, -0.391471, -18.968804, -1.874845},
                        /* Normal -K	L=0.250000	R00=1.50	R11=14.00 */
                        {27.54715, 3.436574, 14.039709, 13.687913, -9.043699, -2.859589, -0.611115, -0.099165, -0.556125, -0.390606, -18.969048, -1.901787},
                        /* Normal -K	L=0.255000	R00=1.50	R11=14.00 */
                        {27.62455, 3.436900, 14.038652, 13.665963, -9.043739, -2.901178, -0.602352, -0.097568, -0.558976, -0.389900, -18.969150, -1.928883},
                        /* Normal -K	L=0.260000	R00=1.50	R11=14.00 */
                        {27.70008, 3.437318, 14.037547, 13.644771, -9.046456, -2.943067, -0.593796, -0.096012, -0.561943, -0.389349, -18.969113, -1.956123},
                        /* Normal -K	L=0.265000	R00=1.50	R11=14.00 */
                        {27.77383, 3.437825, 14.036393, 13.624298, -9.051738, -2.985241, -0.585448, -0.094495, -0.565022, -0.388947, -18.968944, -1.983502},
                        /* Normal -K	L=0.270000	R00=1.50	R11=14.00 */
                        {27.84588, 3.438418, 14.035192, 13.604504, -9.059479, -3.027686, -0.577305, -0.093014, -0.568209, -0.388688, -18.968648, -2.011013},
                        /* Normal -K	L=0.275000	R00=2.50	R11=16.00 */
                        {21.96270, 2.688894, 10.841504, 10.520593, -7.933254, -2.504948, -0.704976, -0.104703, -0.620205, -0.446569, -17.700580, -1.943064},
                        /* Normal -K	L=0.280000	R00=3.50	R11=18.00 */
                        {18.85041, 2.292182, 9.144061, 8.879875, -7.204731, -2.224727, -0.765877, -0.108614, -0.639076, -0.471032, -16.663080, -1.893197},
                        /* Normal -K	L=0.285000	R00=4.50	R11=20.00 */
                        {16.85797, 2.038168, 8.051617, 7.823243, -6.666737, -2.043772, -0.795290, -0.109058, -0.643101, -0.480127, -15.792729, -1.855164},
                        /* Normal -K	L=0.290000	R00=5.50	R11=22.00 */
                        {15.44762, 1.858391, 7.273813, 7.070650, -6.242837, -1.915061, -0.808011, -0.107797, -0.639746, -0.481327, -15.048544, -1.825542},
                        /* Normal -K	L=0.295000	R00=6.50	R11=24.00 */
                        {14.38492, 1.722999, 6.684039, 6.499914, -5.895521, -1.817911, -0.811322, -0.105670, -0.632573, -0.478254, -14.402497, -1.802203},
                        /* Normal -K	L=0.300000	R00=7.50	R11=26.00 */
                        {13.54922, 1.616619, 6.217121, 6.048102, -5.603294, -1.741581, -0.809153, -0.103115, -0.623439, -0.472829, -13.834624, -1.783723},
                        /* Normal -K	L=0.305000	R00=8.50	R11=28.00 */
                        {12.87128, 1.530430, 5.835650, 5.679071, -5.352583, -1.679850, -0.803763, -0.100373, -0.613367, -0.466133, -13.330250, -1.769102},
                        /* Normal -K	L=0.310000	R00=9.50	R11=30.00 */
                        {12.30816, 1.458957, 5.516425, 5.370391, -5.134229, -1.628824, -0.796508, -0.097579, -0.602938, -0.458798, -12.878302, -1.757609},
                        /* Normal -K	L=0.315000	R00=10.50	R11=32.00 */
                        {11.83166, 1.398602, 5.244195, 5.107310, -4.941747, -1.585925, -0.788224, -0.094814, -0.592489, -0.451201, -12.470247, -1.748695},
                        /* Normal -K	L=0.320000	R00=11.50	R11=34.00 */
                        {11.42237, 1.346889, 5.008471, 4.879675, -4.770371, -1.549364, -0.779440, -0.092121, -0.582213, -0.443573, -12.099380, -1.741938},
                        /* Normal -K	L=0.325000	R00=12.50	R11=36.00 */
                        {11.06646, 1.302052, 4.801768, 4.680238, -4.616496, -1.517856, -0.770494, -0.089526, -0.572223, -0.436052, -11.760356, -1.737005},
                        /* Normal -K	L=0.330000	R00=13.50	R11=38.00 */
                        {10.75377, 1.262792, 4.618588, 4.503671, -4.477333, -1.490451, -0.761603, -0.087043, -0.562575, -0.428722, -11.448848, -1.733633},
                        /* Normal -K	L=0.335000	R00=14.50	R11=40.00 */
                        {10.47664, 1.228130, 4.454788, 4.345955, -4.350676, -1.466426, -0.752904, -0.084677, -0.553299, -0.421629, -11.161313, -1.731607},
                        /* Normal -K	L=0.340000	R00=15.50	R11=42.00 */
                        {10.22918, 1.197312, 4.307176, 4.203996, -4.234757, -1.445225, -0.744484, -0.082429, -0.544401, -0.414798, -10.894818, -1.730752},
                        /* Normal -K	L=0.345000	R00=16.50	R11=44.00 */
                        {10.00678, 1.169748, 4.173254, 4.075368, -4.128135, -1.426407, -0.736394, -0.080298, -0.535877, -0.408240, -10.646910, -1.730924},
                        /* Normal -K	L=0.350000	R00=17.50	R11=46.00 */
                        { 9.80576, 1.144966, 4.051030, 3.958136, -4.029623, -1.409620, -0.728663, -0.078280, -0.527716, -0.401954, -10.415521, -1.731999},

                };
        float LQROutBuf[2] = {0};
        float LQRXerrorBuf[6] = {0};
        float MatLQRNegK_fly[12] = {0};

        arm_matrix_instance_f32 *LQRXRefX;
        arm_matrix_instance_f32 *LQRXObsX;


        arm_matrix_instance_f32 MatLQRNegK = {2, 6, (float *) LQRKbuf[0]};
        arm_matrix_instance_f32 MatLQRErrX = {6, 1, LQRXerrorBuf};
        arm_matrix_instance_f32 MatLQROutU = {2, 1, LQROutBuf};


    public:

        /*Calculate X. Output is u (T,Tp)`*/
        void LQRCal(float *Tout) {
            //Calculate error
            arm_mat_sub_f32(this->LQRXObsX, this->LQRXRefX, &this->MatLQRErrX);
            //Calculate output value
            arm_mat_mult_f32(&this->MatLQRNegK, &this->MatLQRErrX, &this->MatLQROutU);
            //return Value
            Tout[0] = this->LQROutBuf[0];
            Tout[1] = this->LQROutBuf[1];
        }

        /*
            SetLQR -K paramaters
            LegLenth : Really length of leg
            isFly	 : Is robot in the sky, should compare with offground detection
        */
        void RefreshLQRK(float LegLenth, uint8_t isFly) {
            LegLenth = (LegLenth < LEG_MIN_LEN) ? LEG_MIN_LEN : LegLenth;
            LegLenth = (LegLenth > LEG_MAX_LEN) ? LEG_MAX_LEN : LegLenth;
            volatile uint8_t ID = roundf((LegLenth - LEG_MIN_LEN) / LQRRESOLUTION);
            ID_T = ID;
            if (isFly) {
                MatLQRNegK_fly[6] = LQRKbuf[ID][6];
                MatLQRNegK_fly[7] = LQRKbuf[ID][7];
                this->MatLQRNegK.pData = (float *) MatLQRNegK_fly;
            } else {
                this->MatLQRNegK.pData = (float *) LQRKbuf[ID];
            }
        }

        /* Set LQR Error Variate*/
        void InitMatX(arm_matrix_instance_f32 *pMatXRef, arm_matrix_instance_f32 *pMatXObs) {
            this->LQRXRefX = pMatXRef;
            this->LQRXObsX = pMatXObs;
        }
    };

}
#endif