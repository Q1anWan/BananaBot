/*
 * @Description: Task of Servos control
 * @Author: qianwan
 * @Date: 2023-12-25 11:44:40
 * @LastEditTime: 2024-05-23 17:05:08
 * @LastEditors: qianwan
 */
#pragma once
#ifndef TASK_SERVO_H
#define TASK_SERVO_H

#include "arm_math.h"

#define LEG_MAX_LEN 0.350f
#define LEG_MIN_LEN 0.150f
#define LEG_START_LEN 0.150f

namespace TASK_CONTROL {

    class cPID_Len {
    protected:
        float _kp;
        float _kd;
        float _dt;
        float _max;
        float _min;
        float _ref;
        float _out;
    public:
        void SetParam(float kp, float kd, float max, float min) {
            _kp = kp;
            _kd = kd;
            _max = max;
            _min = min;
        }

        void SetRef(float ref) {
            _ref = ref;
        }

        float Out() {
            return _out;
        }

        float Calculate(float x, float x_dot, float dt) {
            float out_val;
            out_val = _kp * (_ref - x) + x_dot * _kd / dt;
            if (out_val > _max) {
                out_val = _max;
            } else if (out_val < _min) {
                out_val = _min;
            }
            _out = out_val;
            return out_val;
        }
    };

    class cLegUpdate {
    protected:
        float _length;
        float _path;
    public:
        cLegUpdate(float default_length, float path) : _length(default_length), _path(path) {}

        void Set_Length(float length) {
            _length = length;
        }

        void Set_Path(float path) {
            _path = path;
        }

        float update_val(float new_val) {
            if (fabsf(new_val - _length) < 1.1f * _path) {
                _length = new_val;
            } else {
                if (new_val < _length) {
                    _length -= _path;
                } else {
                    _length += _path;
                }
            }
            return _length;
        }
    };

#define LQRRESOLUTION 0.005f
#define LQRKNUM 41

    /*行进控制*/
    class cLQR {
    protected:
        /*LQR -K matrix*/
        /*2N means normal LQR*/
        /*2N+1 means off-ground LQR*/
        float LQRKbuf[LQRKNUM][12] =
                {

                        //-K in Arm Math Matrix Order: K00 K01 K02 K03 K04 K05 K10 K11 K12 K13 K14 K15
                        // size(K) = 41	, step(L) = 0.005000
                        /* Normal -K	L=0.150000	R00=5.00	R11=10.00 */
                        {17.74615, 2.792066, 9.633321, 9.250451, -10.748308, -1.693102, -3.115280, -0.588396, -1.897252, -1.654109, -21.399831, -1.415157},
                        /* Normal -K	L=0.155000	R00=5.00	R11=10.00 */
                        {17.87504, 2.794819, 9.639678, 9.219588, -10.618630, -1.712766, -3.076276, -0.577192, -1.881037, -1.624998, -21.431445, -1.439218},
                        /* Normal -K	L=0.160000	R00=5.00	R11=10.00 */
                        {17.99911, 2.797517, 9.645682, 9.190416, -10.495365, -1.733130, -3.037663, -0.566399, -1.865585, -1.597216, -21.461141, -1.463594},
                        /* Normal -K	L=0.165000	R00=5.00	R11=10.00 */
                        {18.11866, 2.800167, 9.651346, 9.162791, -10.378204, -1.754148, -2.999485, -0.555996, -1.850880, -1.570693, -21.489046, -1.488277},
                        /* Normal -K	L=0.170000	R00=5.00	R11=10.00 */
                        {18.23394, 2.802776, 9.656684, 9.136583, -10.266856, -1.775778, -2.961776, -0.545961, -1.836906, -1.545362, -21.515278, -1.513259},
                        /* Normal -K	L=0.175000	R00=5.00	R11=10.00 */
                        {18.34520, 2.805349, 9.661710, 9.111679, -10.161046, -1.797980, -2.924562, -0.536276, -1.823644, -1.521159, -21.539946, -1.538532},
                        /* Normal -K	L=0.180000	R00=5.00	R11=10.00 */
                        {18.45266, 2.807892, 9.666438, 9.087976, -10.060518, -1.820720, -2.887866, -0.526923, -1.811074, -1.498029, -21.563149, -1.564087},
                        /* Normal -K	L=0.185000	R00=5.00	R11=10.00 */
                        {18.55653, 2.810410, 9.670880, 9.065384, -9.965028,  -1.843964, -2.851706, -0.517884, -1.799179, -1.475915, -21.584978, -1.589915},
                        /* Normal -K	L=0.190000	R00=5.00	R11=10.00 */
                        {18.65699, 2.812906, 9.675048, 9.043820, -9.874350,  -1.867681, -2.816095, -0.509145, -1.787937, -1.454768, -21.605519, -1.616007},
                        /* Normal -K	L=0.195000	R00=5.00	R11=10.00 */
                        {18.75424, 2.815384, 9.678956, 9.023209, -9.788266,  -1.891843, -2.781045, -0.500689, -1.777330, -1.434541, -21.624849, -1.642355},
                        /* Normal -K	L=0.200000	R00=5.00	R11=10.00 */
                        {18.84843, 2.817848, 9.682615, 9.003486, -9.706576,  -1.916424, -2.746561, -0.492505, -1.767338, -1.415191, -21.643041, -1.668949},
                        /* Normal -K	L=0.205000	R00=5.00	R11=10.00 */
                        {18.93972, 2.820301, 9.686035, 8.984589, -9.629086,  -1.941400, -2.712649, -0.484578, -1.757942, -1.396675, -21.660160, -1.695781},
                        /* Normal -K	L=0.210000	R00=5.00	R11=10.00 */
                        {19.02826, 2.822745, 9.689228, 8.966463, -9.555617,  -1.966747, -2.679314, -0.476895, -1.749123, -1.378956, -21.676269, -1.722843},
                        /* Normal -K	L=0.215000	R00=5.00	R11=10.00 */
                        {19.11417, 2.825183, 9.692203, 8.949057, -9.485998,  -1.992445, -2.646555, -0.469447, -1.740863, -1.361997, -21.691424, -1.750125},
                        /* Normal -K	L=0.220000	R00=5.00	R11=10.00 */
                        {19.19759, 2.827616, 9.694969, 8.932326, -9.420066,  -2.018475, -2.614374, -0.462221, -1.733143, -1.345765, -21.705678, -1.777619},
                        /* Normal -K	L=0.225000	R00=5.00	R11=10.00 */
                        {19.27864, 2.830048, 9.697536, 8.916227, -9.357669,  -2.044817, -2.582768, -0.455209, -1.725947, -1.330228, -21.719081, -1.805317},
                        /* Normal -K	L=0.230000	R00=5.00	R11=10.00 */
                        {19.35743, 2.832479, 9.699913, 8.900722, -9.298662,  -2.071455, -2.551736, -0.448399, -1.719257, -1.315356, -21.731678, -1.833211},
                        /* Normal -K	L=0.235000	R00=5.00	R11=10.00 */
                        {19.43405, 2.834911, 9.702107, 8.885775, -9.242907,  -2.098372, -2.521275, -0.441783, -1.713056, -1.301121, -21.743512, -1.861293},
                        /* Normal -K	L=0.240000	R00=5.00	R11=10.00 */
                        {19.50861, 2.837346, 9.704126, 8.871354, -9.190275,  -2.125555, -2.491381, -0.435353, -1.707329, -1.287497, -21.754621, -1.889556},
                        /* Normal -K	L=0.245000	R00=5.00	R11=10.00 */
                        {19.58120, 2.839784, 9.705977, 8.857428, -9.140640,  -2.152988, -2.462049, -0.429101, -1.702060, -1.274458, -21.765044, -1.917991},
                        /* Normal -K	L=0.250000	R00=5.00	R11=10.00 */
                        {19.65191, 2.842227, 9.707667, 8.843970, -9.093886,  -2.180659, -2.433275, -0.423018, -1.697234, -1.261982, -21.774813, -1.946593},
                        /* Normal -K	L=0.255000	R00=5.00	R11=10.00 */
                        {19.72082, 2.844676, 9.709202, 8.830953, -9.049901,  -2.208554, -2.405054, -0.417098, -1.692836, -1.250046, -21.783962, -1.975352},
                        /* Normal -K	L=0.260000	R00=5.00	R11=10.00 */
                        {19.78799, 2.847132, 9.710590, 8.818354, -9.008577,  -2.236664, -2.377379, -0.411334, -1.688853, -1.238628, -21.792520, -2.004264},
                        /* Normal -K	L=0.265000	R00=5.00	R11=10.00 */
                        {19.85352, 2.849595, 9.711834, 8.806150, -8.969813,  -2.264976, -2.350245, -0.405719, -1.685270, -1.227710, -21.800515, -2.033321},
                        /* Normal -K	L=0.270000	R00=5.00	R11=10.00 */
                        {19.91746, 2.852066, 9.712942, 8.794321, -8.933512,  -2.293480, -2.323646, -0.400248, -1.682075, -1.217272, -21.807974, -2.062516},
                        /* Normal -K	L=0.275000	R00=5.00	R11=10.00 */
                        {19.97988, 2.854545, 9.713918, 8.782847, -8.899582,  -2.322167, -2.297575, -0.394915, -1.679254, -1.207296, -21.814921, -2.091845},
                        /* Normal -K	L=0.280000	R00=5.00	R11=10.00 */
                        {20.04084, 2.857033, 9.714768, 8.771711, -8.867935,  -2.351027, -2.272025, -0.389714, -1.676796, -1.197765, -21.821380, -2.121300},
                        /* Normal -K	L=0.285000	R00=5.00	R11=10.00 */
                        {20.10039, 2.859531, 9.715495, 8.760895, -8.838486,  -2.380051, -2.246991, -0.384640, -1.674688, -1.188664, -21.827371, -2.150875},
                        /* Normal -K	L=0.290000	R00=5.00	R11=10.00 */
                        {20.15860, 2.862039, 9.716104, 8.750385, -8.811154,  -2.409232, -2.222466, -0.379688, -1.672920, -1.179976, -21.832916, -2.180566},
                        /* Normal -K	L=0.295000	R00=5.00	R11=10.00 */
                        {20.21552, 2.864557, 9.716600, 8.740164, -8.785863,  -2.438561, -2.198442, -0.374853, -1.671478, -1.171687, -21.838034, -2.210367},
                        /* Normal -K	L=0.300000	R00=5.00	R11=10.00 */
                        {20.27119, 2.867086, 9.716987, 8.730220, -8.762538,  -2.468032, -2.174914, -0.370132, -1.670354, -1.163783, -21.842742, -2.240273},
                        /* Normal -K	L=0.305000	R00=5.00	R11=10.00 */
                        {20.32566, 2.869625, 9.717268, 8.720540, -8.741109,  -2.497636, -2.151873, -0.365519, -1.669536, -1.156252, -21.847058, -2.270278},
                        /* Normal -K	L=0.310000	R00=5.00	R11=10.00 */
                        {20.37898, 2.872175, 9.717447, 8.711111, -8.721507,  -2.527367, -2.129315, -0.361011, -1.669015, -1.149079, -21.850998, -2.300378},
                        /* Normal -K	L=0.315000	R00=5.00	R11=10.00 */
                        {20.43118, 2.874737, 9.717528, 8.701922, -8.703668,  -2.557220, -2.107231, -0.356604, -1.668780, -1.142253, -21.854577, -2.330568},
                        /* Normal -K	L=0.320000	R00=5.00	R11=10.00 */
                        {20.48231, 2.877309, 9.717513, 8.692962, -8.687529,  -2.587187, -2.085615, -0.352295, -1.668822, -1.135763, -21.857809, -2.360844},
                        /* Normal -K	L=0.325000	R00=5.00	R11=10.00 */
                        {20.53241, 2.879893, 9.717407, 8.684222, -8.673029,  -2.617263, -2.064461, -0.348079, -1.669132, -1.129597, -21.860708, -2.391202},
                        /* Normal -K	L=0.330000	R00=5.00	R11=10.00 */
                        {20.58150, 2.882487, 9.717211, 8.675691, -8.660112,  -2.647442, -2.043761, -0.343955, -1.669701, -1.123745, -21.863287, -2.421636},
                        /* Normal -K	L=0.335000	R00=5.00	R11=10.00 */
                        {20.62964, 2.885094, 9.716930, 8.667361, -8.648721,  -2.677719, -2.023510, -0.339917, -1.670520, -1.118196, -21.865559, -2.452144},
                        /* Normal -K	L=0.340000	R00=5.00	R11=10.00 */
                        {20.67685, 2.887711, 9.716565, 8.659223, -8.638803,  -2.708089, -2.003701, -0.335964, -1.671582, -1.112941, -21.867533, -2.482721},
                        /* Normal -K	L=0.345000	R00=5.00	R11=10.00 */
                        {20.72315, 2.890340, 9.716119, 8.651269, -8.630307,  -2.738546, -1.984327, -0.332093, -1.672877, -1.107970, -21.869223, -2.513364},
                        /* Normal -K	L=0.350000	R00=5.00	R11=10.00 */
                        {20.76859, 2.892980, 9.715595, 8.643492, -8.623182,  -2.769087, -1.965382, -0.328301, -1.674398, -1.103274, -21.870637, -2.544069},

                };
        float LQROutBuf[2] = {0};
        float LQRXerrorBuf[6] = {0};
        float MatLQRNegK_fly[12] = {0};

        arm_matrix_instance_f32 *LQRXRefX;
        arm_matrix_instance_f32 *LQRXObsX;


        arm_matrix_instance_f32 MatLQRNegK = {2, 6, (float *) LQRKbuf[0]};
        arm_matrix_instance_f32 MatLQRErrX = {6, 1, LQRXerrorBuf};
        arm_matrix_instance_f32 MatLQROutU = {2, 1, LQROutBuf};


    public:

        /*Calculate X. Output is u (T,Tp)`*/
        void LQRCal(float *Tout) {
            //Calculate error
            arm_mat_sub_f32(this->LQRXObsX, this->LQRXRefX, &this->MatLQRErrX);
            //Calculate output value
            arm_mat_mult_f32(&this->MatLQRNegK, &this->MatLQRErrX, &this->MatLQROutU);
            //return Value
            Tout[0] = this->LQROutBuf[0];
            Tout[1] = this->LQROutBuf[1];
        }

        /*
            SetLQR -K paramaters
            LegLenth : Really length of leg
            isFly	 : Is robot in the sky, should compare with offground detection
        */
        void RefreshLQRK(float LegLenth, uint8_t isFly) {
            LegLenth = (LegLenth < LEG_MIN_LEN) ? LEG_MIN_LEN : LegLenth;
            LegLenth = (LegLenth > LEG_MAX_LEN) ? LEG_MAX_LEN : LegLenth;
            volatile uint8_t ID = roundf((LegLenth - LEG_MIN_LEN) / LQRRESOLUTION);
            if (isFly) {
                MatLQRNegK_fly[6] = LQRKbuf[ID][6];
                MatLQRNegK_fly[7] = LQRKbuf[ID][7];
                this->MatLQRNegK.pData = (float *) MatLQRNegK_fly;
            } else {
                this->MatLQRNegK.pData = (float *) LQRKbuf[ID];
            }
        }

        /* Set LQR Error Variate*/
        void InitMatX(arm_matrix_instance_f32 *pMatXRef, arm_matrix_instance_f32 *pMatXObs) {
            this->LQRXRefX = pMatXRef;
            this->LQRXObsX = pMatXObs;
        }
    };

}
#endif