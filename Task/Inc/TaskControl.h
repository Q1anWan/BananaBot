/*
 * @Description: Task of Servos control
 * @Author: qianwan
 * @Date: 2023-12-25 11:44:40
 * @LastEditTime: 2024-05-23 17:05:08
 * @LastEditors: qianwan
 */
#pragma once
#ifndef TASK_SERVO_H
#define TASK_SERVO_H

#include "arm_math.h"

#define LEG_MAX_LEN 0.350f
#define LEG_MIN_LEN 0.150f
#define LEG_START_LEN 0.150f


//#define LEG_MAX_LEN 0.300f
//#define LEG_MIN_LEN 0.150f
//#define LEG_START_LEN 0.300f

#define V_ACCEL 1.0f
#define V_STOP 1.3f
#define V_MAX 1.0f
#define V_LIMIT_SCOPE 5.0f
#define V_LIMIT_LEN 0.25f

extern uint8_t ID_T;
namespace TASK_CONTROL {

    class cPID_Len {
    protected:
        float _kp;
        float _kd;
        float _dt;
        float _max;
        float _min;
        float _ref;
        float _out;
    public:
        void SetParam(float kp, float kd, float max, float min) {
            _kp = kp;
            _kd = kd;
            _max = max;
            _min = min;
        }

        void SetRef(float ref) {
            _ref = ref;
        }

        float Out() {
            return _out;
        }

        float Calculate(float x, float x_dot, float dt) {
            float out_val;
            out_val = _kp * (_ref - x) + x_dot * _kd / dt;
            if (out_val > _max) {
                out_val = _max;
            } else if (out_val < _min) {
                out_val = _min;
            }
            _out = out_val;
            return out_val;
        }
    };

    class cLegUpdate {
    protected:
        float _length;
        float _path;
    public:
        cLegUpdate(float default_length, float path) : _length(default_length), _path(path) {}

        void Set_Length(float length) {
            _length = length;
        }

        void Set_Path(float path) {
            _path = path;
        }

        float update_val(float new_val) {
            if (fabsf(new_val - _length) < 1.1f * _path) {
                _length = new_val;
            } else {
                if (new_val < _length) {
                    _length -= _path;
                } else {
                    _length += _path;
                }
            }
            return _length;
        }
    };

#define LQRRESOLUTION 0.005f
#define LQRKNUM 41

    /*行进控制*/
    class cLQR {
    protected:
        /*LQR -K matrix*/
        /*2N means normal LQR*/
        /*2N+1 means off-ground LQR*/
        float LQRKbuf[LQRKNUM][12] =
                {

                        //-K in Arm Math Matrix Order: K00 K01 K02 K03 K04 K05 K10 K11 K12 K13 K14 K15
                        // size(K) = 41	, step(L) = 0.005000
                        /* Normal -K	L=0.150000	R00=5.00	R11=27.00 */
                        {15.53248, 1.971758, 8.823752, 9.591703, -7.154967, -1.509300, -0.840690, -0.140842, -0.629727, -0.584841, -13.573472, -1.120347},
                        /* Normal -K	L=0.155000	R00=5.00	R11=27.00 */
                        {15.63846, 1.971380, 8.824270, 9.564271, -7.093066, -1.530958, -0.826619, -0.137700, -0.628381, -0.578525, -13.579314, -1.140265},
                        /* Normal -K	L=0.160000	R00=5.00	R11=27.00 */
                        {15.74066, 1.971137, 8.824668, 9.538347, -7.036447, -1.553268, -0.812807, -0.134685, -0.627346, -0.572696, -13.584630, -1.160461},
                        /* Normal -K	L=0.165000	R00=5.00	R11=27.00 */
                        {15.83933, 1.971023, 8.824949, 9.513804, -6.984815, -1.576185, -0.799262, -0.131791, -0.626612, -0.567329, -13.589456, -1.180920},
                        /* Normal -K	L=0.170000	R00=5.00	R11=27.00 */
                        {15.93467, 1.971034, 8.825118, 9.490528, -6.937895, -1.599671, -0.785990, -0.129007, -0.626171, -0.562403, -13.593825, -1.201630},
                        /* Normal -K	L=0.175000	R00=5.00	R11=27.00 */
                        {16.02688, 1.971166, 8.825179, 9.468420, -6.895434, -1.623688, -0.772997, -0.126329, -0.626012, -0.557896, -13.597767, -1.222578},
                        /* Normal -K	L=0.180000	R00=5.00	R11=27.00 */
                        {16.11615, 1.971413, 8.825135, 9.447387, -6.857192, -1.648205, -0.760287, -0.123748, -0.626127, -0.553789, -13.601307, -1.243752},
                        /* Normal -K	L=0.185000	R00=5.00	R11=27.00 */
                        {16.20263, 1.971771, 8.824990, 9.427348, -6.822949, -1.673189, -0.747864, -0.121259, -0.626505, -0.550064, -13.604472, -1.265142},
                        /* Normal -K	L=0.190000	R00=5.00	R11=27.00 */
                        {16.28649, 1.972237, 8.824748, 9.408230, -6.792498, -1.698613, -0.735729, -0.118856, -0.627138, -0.546702, -13.607283, -1.286735},
                        /* Normal -K	L=0.195000	R00=5.00	R11=27.00 */
                        {16.36786, 1.972806, 8.824411, 9.389966, -6.765644, -1.724449, -0.723885, -0.116534, -0.628016, -0.543687, -13.609760, -1.308521},
                        /* Normal -K	L=0.200000	R00=5.00	R11=27.00 */
                        {16.44689, 1.973475, 8.823982, 9.372495, -6.742206, -1.750674, -0.712333, -0.114288, -0.629129, -0.541004, -13.611923, -1.330490},
                        /* Normal -K	L=0.205000	R00=5.00	R11=27.00 */
                        {16.52369, 1.974240, 8.823466, 9.355763, -6.722012, -1.777264, -0.701074, -0.112113, -0.630468, -0.538639, -13.613789, -1.352632},
                        /* Normal -K	L=0.210000	R00=5.00	R11=27.00 */
                        {16.59837, 1.975097, 8.822864, 9.339720, -6.704902, -1.804197, -0.690108, -0.110007, -0.632026, -0.536577, -13.615373, -1.374937},
                        /* Normal -K	L=0.215000	R00=5.00	R11=27.00 */
                        {16.67104, 1.976044, 8.822180, 9.324320, -6.690724, -1.831455, -0.679436, -0.107964, -0.633793, -0.534805, -13.616690, -1.397398},
                        /* Normal -K	L=0.220000	R00=5.00	R11=27.00 */
                        {16.74181, 1.977076, 8.821415, 9.309521, -6.679335, -1.859017, -0.669057, -0.105981, -0.635760, -0.533310, -13.617754, -1.420004},
                        /* Normal -K	L=0.225000	R00=5.00	R11=27.00 */
                        {16.81076, 1.978192, 8.820573, 9.295286, -6.670598, -1.886867, -0.658970, -0.104056, -0.637920, -0.532082, -13.618577, -1.442749},
                        /* Normal -K	L=0.230000	R00=5.00	R11=27.00 */
                        {16.87799, 1.979387, 8.819656, 9.281578, -6.664385, -1.914988, -0.649174, -0.102185, -0.640264, -0.531108, -13.619171, -1.465623},
                        /* Normal -K	L=0.235000	R00=5.00	R11=27.00 */
                        {16.94356, 1.980660, 8.818666, 9.268366, -6.660574, -1.943363, -0.639669, -0.100365, -0.642785, -0.530378, -13.619546, -1.488621},
                        /* Normal -K	L=0.240000	R00=5.00	R11=27.00 */
                        {17.00757, 1.982006, 8.817605, 9.255619, -6.659049, -1.971979, -0.630453, -0.098594, -0.645475, -0.529881, -13.619713, -1.511734},
                        /* Normal -K	L=0.245000	R00=5.00	R11=27.00 */
                        {17.07007, 1.983425, 8.816475, 9.243311, -6.659699, -2.000820, -0.621523, -0.096869, -0.648327, -0.529608, -13.619680, -1.534956},
                        /* Normal -K	L=0.250000	R00=5.00	R11=27.00 */
                        {17.13113, 1.984914, 8.815278, 9.231416, -6.662418, -2.029874, -0.612879, -0.095188, -0.651333, -0.529549, -13.619458, -1.558281},
                        /* Normal -K	L=0.255000	R00=5.00	R11=27.00 */
                        {17.19083, 1.986469, 8.814017, 9.219911, -6.667107, -2.059128, -0.604519, -0.093549, -0.654486, -0.529695, -13.619054, -1.581703},
                        /* Normal -K	L=0.260000	R00=5.00	R11=27.00 */
                        {17.24921, 1.988089, 8.812693, 9.208773, -6.673670, -2.088570, -0.596439, -0.091949, -0.657779, -0.530038, -13.618476, -1.605215},
                        /* Normal -K	L=0.265000	R00=5.00	R11=27.00 */
                        {17.30634, 1.989772, 8.811308, 9.197983, -6.682013, -2.118188, -0.588638, -0.090388, -0.661207, -0.530569, -13.617732, -1.628812},
                        /* Normal -K	L=0.270000	R00=5.00	R11=27.00 */
                        {17.36226, 1.991515, 8.809864, 9.187521, -6.692050, -2.147971, -0.581114, -0.088864, -0.664761, -0.531280, -13.616827, -1.652490},
                        /* Normal -K	L=0.275000	R00=6.00	R11=29.00 */
                        {16.04303, 1.830831, 8.030426, 8.377313, -6.335293, -2.027397, -0.609031, -0.089203, -0.671425, -0.541422, -13.126166, -1.636681},
                        /* Normal -K	L=0.280000	R00=7.00	R11=31.00 */
                        {15.02526, 1.706930, 7.425204, 7.748126, -6.038535, -1.934794, -0.627644, -0.088662, -0.673567, -0.546555, -12.686146, -1.624454},
                        /* Normal -K	L=0.285000	R00=8.00	R11=33.00 */
                        {14.21115, 1.607915, 6.937780, 7.241433, -5.785601, -1.861188, -0.640007, -0.087578, -0.672798, -0.548412, -12.288489, -1.615098},
                        /* Normal -K	L=0.290000	R00=9.00	R11=35.00 */
                        {13.54219, 1.526661, 6.534377, 6.822172, -5.566131, -1.801180, -0.648073, -0.086156, -0.670123, -0.548083, -11.926722, -1.608093},
                        /* Normal -K	L=0.295000	R00=10.00	R11=37.00 */
                        {12.98091, 1.458607, 6.193374, 6.467891, -5.373052, -1.751300, -0.653138, -0.084533, -0.666196, -0.546282, -11.595693, -1.603044},
                        /* Normal -K	L=0.300000	R00=11.00	R11=39.00 */
                        {12.50212, 1.400680, 5.900208, 6.163458, -5.201305, -1.709200, -0.656090, -0.082795, -0.661448, -0.543486, -11.291241, -1.599646},
                        /* Normal -K	L=0.305000	R00=12.00	R11=41.00 */
                        {12.08812, 1.350722, 5.644664, 5.898255, -5.047131, -1.673224, -0.657547, -0.081003, -0.656174, -0.540024, -11.009959, -1.597656},
                        /* Normal -K	L=0.310000	R00=13.00	R11=43.00 */
                        {11.72611, 1.307172, 5.419341, 5.664581, -4.907662, -1.642167, -0.657949, -0.079197, -0.650575, -0.536123, -10.749027, -1.596880},
                        /* Normal -K	L=0.315000	R00=14.00	R11=45.00 */
                        {11.40656, 1.268863, 5.218723, 5.456697, -4.780652, -1.615127, -0.657614, -0.077403, -0.644791, -0.531942, -10.506088, -1.597158},
                        /* Normal -K	L=0.320000	R00=15.00	R11=47.00 */
                        {11.12220, 1.234909, 5.038610, 5.270230, -4.664314, -1.591415, -0.656771, -0.075641, -0.638918, -0.527596, -10.279154, -1.598358},
                        /* Normal -K	L=0.325000	R00=16.00	R11=49.00 */
                        {10.86739, 1.204618, 4.875736, 5.101777, -4.557198, -1.570491, -0.655590, -0.073923, -0.633023, -0.523165, -10.066533, -1.600372},
                        /* Normal -K	L=0.330000	R00=17.00	R11=51.00 */
                        {10.63767, 1.177445, 4.727520, 4.948648, -4.458113, -1.551929, -0.654197, -0.072258, -0.627154, -0.518706, -9.866776, -1.603108},
                        /* Normal -K	L=0.335000	R00=18.00	R11=53.00 */
                        {10.42947, 1.152952, 4.591892, 4.808683, -4.366070, -1.535385, -0.652683, -0.070650, -0.621343, -0.514258, -9.678634, -1.606486},
                        /* Normal -K	L=0.340000	R00=19.00	R11=55.00 */
                        {10.23988, 1.130781, 4.467169, 4.680128, -4.280238, -1.520577, -0.651115, -0.069103, -0.615610, -0.509851, -9.501022, -1.610439},
                        /* Normal -K	L=0.345000	R00=20.00	R11=57.00 */
                        {10.06652, 1.110641, 4.351967, 4.561537, -4.199914, -1.507276, -0.649544, -0.067619, -0.609970, -0.505503, -9.332994, -1.614911},
                        /* Normal -K	L=0.350000	R00=21.00	R11=59.00 */
                        { 9.90741, 1.092287, 4.245139, 4.451710, -4.124498, -1.495288, -0.648006, -0.066197, -0.604429, -0.501228, -9.173719, -1.619851},

                };
        float LQROutBuf[2] = {0};
        float LQRXerrorBuf[6] = {0};
        float MatLQRNegK_fly[12] = {0};

        arm_matrix_instance_f32 *LQRXRefX;
        arm_matrix_instance_f32 *LQRXObsX;


        arm_matrix_instance_f32 MatLQRNegK = {2, 6, (float *) LQRKbuf[0]};
        arm_matrix_instance_f32 MatLQRErrX = {6, 1, LQRXerrorBuf};
        arm_matrix_instance_f32 MatLQROutU = {2, 1, LQROutBuf};


    public:

        /*Calculate X. Output is u (T,Tp)`*/
        void LQRCal(float *Tout) {
            //Calculate error
            arm_mat_sub_f32(this->LQRXObsX, this->LQRXRefX, &this->MatLQRErrX);
            //Calculate output value
            arm_mat_mult_f32(&this->MatLQRNegK, &this->MatLQRErrX, &this->MatLQROutU);
            //return Value
            Tout[0] = this->LQROutBuf[0];
            Tout[1] = this->LQROutBuf[1];
        }

        /*
            SetLQR -K paramaters
            LegLenth : Really length of leg
            isFly	 : Is robot in the sky, should compare with offground detection
        */
        void RefreshLQRK(float LegLenth, uint8_t isFly) {
            LegLenth = (LegLenth < LEG_MIN_LEN) ? LEG_MIN_LEN : LegLenth;
            LegLenth = (LegLenth > LEG_MAX_LEN) ? LEG_MAX_LEN : LegLenth;
            volatile uint8_t ID = roundf((LegLenth - LEG_MIN_LEN) / LQRRESOLUTION);
            ID_T = ID;
            if (isFly) {
                MatLQRNegK_fly[6] = LQRKbuf[ID][6];
                MatLQRNegK_fly[7] = LQRKbuf[ID][7];
                this->MatLQRNegK.pData = (float *) MatLQRNegK_fly;
            } else {
                this->MatLQRNegK.pData = (float *) LQRKbuf[ID];
            }
        }

        /* Set LQR Error Variate*/
        void InitMatX(arm_matrix_instance_f32 *pMatXRef, arm_matrix_instance_f32 *pMatXObs) {
            this->LQRXRefX = pMatXRef;
            this->LQRXObsX = pMatXObs;
        }
    };

}
#endif