/*
 * @Description: Task of Servos control
 * @Author: qianwan
 * @Date: 2023-12-25 11:44:40
 * @LastEditTime: 2024-05-23 17:05:08
 * @LastEditors: qianwan
 */
#pragma once
#ifndef TASK_SERVO_H
#define TASK_SERVO_H

#include "arm_math.h"

#define LEG_MAX_LEN 0.350f
#define LEG_MIN_LEN 0.150f
#define LEG_START_LEN 0.150f
#define LEG_NORMAL_PATH 0.0004f

#define JUMP_START_LEN 0.150f
#define JUMP_REC_LEN 0.200f
#define JUMP_TOP_LEN 0.300f
#define LEG_REC_PATH 0.002f

#define LQR_MAX_LEN_CTRL 0.350f
#define LQR_MIN_LEN_CTRL 0.130f
#define LQR_LEN_RESOLUTION 0.005f
#define LQR_K_NUM 45

//#define LEG_MAX_LEN 0.300f
//#define LEG_MIN_LEN 0.150f
//#define LEG_START_LEN 0.300f

#define V_ACCEL_MAX 1.2f
#define V_STOP 1.0f
#define V_MAX 1.0f
#define V_LIMIT_LEN 0.20f

extern uint8_t ID_T;
namespace TASK_CONTROL {

    class cPID_Len {
    protected:
        float _kp;
        float _kd;
        float _dt;
        float _max;
        float _min;
        float _ref;
        float _out;
    public:
        void SetParam(float kp, float kd, float max, float min) {
            _kp = kp;
            _kd = kd;
            _max = max;
            _min = min;
        }

        void SetRef(float ref) {
            _ref = ref;
        }

        float Out() {
            return _out;
        }

        float Calculate(float x, float x_dot, float dt) {
            float out_val;
            out_val = _kp * (_ref - x) + x_dot * _kd / dt;
            if (out_val > _max) {
                out_val = _max;
            } else if (out_val < _min) {
                out_val = _min;
            }
            _out = out_val;
            return out_val;
        }
    };

    class cValUpdate {
    protected:
        float _val;
        float _path;
        bool _reached;
    public:
        cValUpdate(float default_val, float path) : _val(default_val), _path(path), _reached(false) {}
        cValUpdate() = default;
        void SetDefault(float val) {
            _val = val;
        }

        void SetPath(float path) {
            _path = path;
        }

        float GetVal() {
            return _val;
        }

        float UpdateVal(float new_val) {
            if (fabsf(new_val - _val) < 1.1f * _path) {
                _val = new_val;
                _reached = true;
            } else {
                _reached = false;
                if (new_val < _val) {
                    _val -= _path;
                } else {
                    _val += _path;
                }
            }
            return _val;
        }

        bool CheckReached() {
            return _reached;
        }
    };


    /*行进控制*/
    class cLQR {
    protected:
        /*LQR -K matrix*/
        /*2N means normal LQR*/
        /*2N+1 means off-ground LQR*/
        float LQRKbuf[LQR_K_NUM][12] =
                {
                        //-K in Arm Math Matrix Order: K00 K01 K02 K03 K04 K05 K10 K11 K12 K13 K14 K15
                        // size(K) = 45	, step(L) = 0.005000
                        /* Normal -K	L=0.130000	R00=5.00	R11=25.00 */
                        {12.99728, 1.688460, 9.852102, 7.926706, -7.331840, -1.272059, -0.946214, -0.136636, -0.766301, -0.530854, -14.050280, -1.053793},
                        /* Normal -K	L=0.135000	R00=5.00	R11=25.00 */
                        {13.09578, 1.688527, 9.854248, 7.882886, -7.235747, -1.285928, -0.934868, -0.133335, -0.760763, -0.520127, -14.059856, -1.072300},
                        /* Normal -K	L=0.140000	R00=5.00	R11=25.00 */
                        {13.19048, 1.688715, 9.856213, 7.841847, -7.146224, -1.300573, -0.923801, -0.130194, -0.755653, -0.510046, -14.068681, -1.091138},
                        /* Normal -K	L=0.145000	R00=5.00	R11=25.00 */
                        {13.28164, 1.689020, 9.858009, 7.803334, -7.062832, -1.315932, -0.913011, -0.127202, -0.750954, -0.500566, -14.076817, -1.110293},
                        /* Normal -K	L=0.150000	R00=5.00	R11=25.00 */
                        {13.36949, 1.689437, 9.859643, 7.767123, -6.985165, -1.331950, -0.902495, -0.124350, -0.746651, -0.491647, -14.084322, -1.129754},
                        /* Normal -K	L=0.155000	R00=5.00	R11=25.00 */
                        {13.45426, 1.689961, 9.861124, 7.733015, -6.912853, -1.348578, -0.892251, -0.121627, -0.742728, -0.483251, -14.091248, -1.149510},
                        /* Normal -K	L=0.160000	R00=5.00	R11=25.00 */
                        {13.53615, 1.690590, 9.862462, 7.700834, -6.845555, -1.365772, -0.882274, -0.119025, -0.739169, -0.475341, -14.097640, -1.169547},
                        /* Normal -K	L=0.165000	R00=5.00	R11=25.00 */
                        {13.61533, 1.691319, 9.863663, 7.670425, -6.782957, -1.383489, -0.872558, -0.116536, -0.735957, -0.467889, -14.103540, -1.189855},
                        /* Normal -K	L=0.170000	R00=5.00	R11=25.00 */
                        {13.69197, 1.692145, 9.864735, 7.641648, -6.724771, -1.401692, -0.863100, -0.114152, -0.733077, -0.460863, -14.108985, -1.210423},
                        /* Normal -K	L=0.175000	R00=5.00	R11=25.00 */
                        {13.76622, 1.693063, 9.865685, 7.614379, -6.670729, -1.420347, -0.853892, -0.111866, -0.730514, -0.454238, -14.114009, -1.231238},
                        /* Normal -K	L=0.180000	R00=5.00	R11=25.00 */
                        {13.83823, 1.694071, 9.866521, 7.588503, -6.620587, -1.439422, -0.844929, -0.109673, -0.728254, -0.447989, -14.118643, -1.252292},
                        /* Normal -K	L=0.185000	R00=5.00	R11=25.00 */
                        {13.90812, 1.695166, 9.867247, 7.563922, -6.574116, -1.458890, -0.836205, -0.107567, -0.726283, -0.442094, -14.122913, -1.273572},
                        /* Normal -K	L=0.190000	R00=5.00	R11=25.00 */
                        {13.97601, 1.696344, 9.867870, 7.540542, -6.531106, -1.478723, -0.827715, -0.105542, -0.724588, -0.436533, -14.126845, -1.295071},
                        /* Normal -K	L=0.195000	R00=5.00	R11=25.00 */
                        {14.04202, 1.697601, 9.868396, 7.518282, -6.491361, -1.498898, -0.819453, -0.103594, -0.723155, -0.431286, -14.130463, -1.316777},
                        /* Normal -K	L=0.200000	R00=5.00	R11=25.00 */
                        {14.10623, 1.698937, 9.868828, 7.497065, -6.454699, -1.519392, -0.811412, -0.101718, -0.721973, -0.426336, -14.133785, -1.338682},
                        /* Normal -K	L=0.205000	R00=5.10	R11=25.50 */
                        {14.04313, 1.684548, 9.771991, 7.404134, -6.357970, -1.527280, -0.796831, -0.098821, -0.713779, -0.417434, -14.000037, -1.352962},
                        /* Normal -K	L=0.210000	R00=5.20	R11=26.00 */
                        {13.98136, 1.670724, 9.677877, 7.314644, -6.266515, -1.535451, -0.782876, -0.096057, -0.706053, -0.409030, -13.869932, -1.367455},
                        /* Normal -K	L=0.215000	R00=5.30	R11=26.50 */
                        {13.92089, 1.657438, 9.586358, 7.228395, -6.179989, -1.543877, -0.769517, -0.093418, -0.698765, -0.401091, -13.743310, -1.382144},
                        /* Normal -K	L=0.220000	R00=5.40	R11=27.00 */
                        {13.86171, 1.644665, 9.497318, 7.145204, -6.098075, -1.552531, -0.756726, -0.090897, -0.691888, -0.393587, -13.620018, -1.397016},
                        /* Normal -K	L=0.225000	R00=5.50	R11=27.50 */
                        {13.80378, 1.632381, 9.410645, 7.064901, -6.020477, -1.561389, -0.744477, -0.088486, -0.685397, -0.386491, -13.499914, -1.412057},
                        /* Normal -K	L=0.230000	R00=5.60	R11=28.00 */
                        {13.74709, 1.620565, 9.326237, 6.987330, -5.946922, -1.570430, -0.732745, -0.086179, -0.679268, -0.379778, -13.382864, -1.427255},
                        /* Normal -K	L=0.235000	R00=6.10	R11=30.50 */
                        {13.28745, 1.559464, 8.935905, 6.685720, -5.682958, -1.534865, -0.702155, -0.080870, -0.650662, -0.360944, -12.834663, -1.415460},
                        /* Normal -K	L=0.240000	R00=6.60	R11=33.00 */
                        {12.88406, 1.505861, 8.590746, 6.419326, -5.450857, -1.504372, -0.675361, -0.076194, -0.625565, -0.344432, -12.349891, -1.406622},
                        /* Normal -K	L=0.245000	R00=7.10	R11=35.50 */
                        {12.52677, 1.458418, 8.282659, 6.181868, -5.244896, -1.478016, -0.651692, -0.072041, -0.603340, -0.329827, -11.917171, -1.400208},
                        /* Normal -K	L=0.250000	R00=7.60	R11=38.00 */
                        {12.20779, 1.416112, 8.005443, 5.968531, -5.060682, -1.455080, -0.630631, -0.068326, -0.583500, -0.316812, -11.527795, -1.395812},
                        /* Normal -K	L=0.255000	R00=8.10	R11=40.50 */
                        {11.92107, 1.378143, 7.754258, 5.775552, -4.894775, -1.435007, -0.611773, -0.064981, -0.565664, -0.305138, -11.174968, -1.393112},
                        /* Normal -K	L=0.260000	R00=8.60	R11=43.00 */
                        {11.66180, 1.343878, 7.525266, 5.599945, -4.744440, -1.417352, -0.594797, -0.061954, -0.549527, -0.294604, -10.853299, -1.391856},
                        /* Normal -K	L=0.265000	R00=11.10	R11=55.50 */
                        {10.51248, 1.202274, 6.624016, 4.938442, -4.176523, -1.290048, -0.540485, -0.053098, -0.483209, -0.258418, -9.583787, -1.320320},
                        /* Normal -K	L=0.270000	R00=13.60	R11=68.00 */
                        { 9.70746, 1.103064, 5.984449, 4.469680, -3.772736, -1.200453, -0.502544, -0.046911, -0.436137, -0.232732, -8.682998, -1.270998},
                        /* Normal -K	L=0.275000	R00=16.10	R11=80.50 */
                        { 9.10662, 1.029061, 5.500365, 4.115500, -3.466382, -1.133287, -0.474287, -0.042308, -0.400472, -0.213280, -8.001282, -1.235202},
                        /* Normal -K	L=0.280000	R00=18.60	R11=93.00 */
                        { 8.63846, 0.971484, 5.117519, 3.835966, -3.223406, -1.080725, -0.452303, -0.038734, -0.372216, -0.197882, -7.462202, -1.208387},
                        /* Normal -K	L=0.285000	R00=21.10	R11=105.50 */
                        { 8.26219, 0.925318, 4.804932, 3.608262, -3.024361, -1.038286, -0.434648, -0.035875, -0.349087, -0.185292, -7.022109, -1.187907},
                        /* Normal -K	L=0.290000	R00=23.60	R11=118.00 */
                        { 7.95263, 0.887463, 4.543457, 3.418278, -2.857236, -1.003198, -0.420121, -0.033536, -0.329677, -0.174742, -6.654022, -1.172095},
                        /* Normal -K	L=0.295000	R00=26.10	R11=130.50 */
                        { 7.69327, 0.855884, 4.320537, 3.256759, -2.714157, -0.973641, -0.407934, -0.031589, -0.313065, -0.165726, -6.340248, -1.159845},
                        /* Normal -K	L=0.300000	R00=28.60	R11=143.00 */
                        { 7.47280, 0.829185, 4.127548, 3.117344, -2.589723, -0.948367, -0.397547, -0.029947, -0.298619, -0.157898, -6.068639, -1.150385},
                        /* Normal -K	L=0.305000	R00=31.10	R11=155.50 */
                        { 7.28315, 0.806369, 3.958347, 2.995500, -2.480089, -0.926483, -0.388577, -0.028546, -0.285889, -0.151011, -5.830538, -1.143159},
                        /* Normal -K	L=0.310000	R00=33.60	R11=168.00 */
                        { 7.11842, 0.786704, 3.808421, 2.887897, -2.382436, -0.907337, -0.380742, -0.027342, -0.274547, -0.144883, -5.619589, -1.137757},
                        /* Normal -K	L=0.315000	R00=36.10	R11=180.50 */
                        { 6.97415, 0.769638, 3.674374, 2.792024, -2.294645, -0.890438, -0.373829, -0.026299, -0.264346, -0.139380, -5.431005, -1.133863},
                        /* Normal -K	L=0.320000	R00=38.60	R11=193.00 */
                        { 6.84692, 0.754748, 3.553590, 2.705949, -2.215088, -0.875407, -0.367676, -0.025390, -0.255096, -0.134396, -5.261101, -1.131236},
                        /* Normal -K	L=0.325000	R00=41.10	R11=205.50 */
                        { 6.73406, 0.741698, 3.444020, 2.628157, -2.142492, -0.861950, -0.362157, -0.024595, -0.246649, -0.129850, -5.106993, -1.129682},
                        /* Normal -K	L=0.330000	R00=43.60	R11=218.00 */
                        { 6.63343, 0.730224, 3.344032, 2.557440, -2.075847, -0.849831, -0.357169, -0.023897, -0.238889, -0.125678, -4.966380, -1.129048},
                        /* Normal -K	L=0.335000	R00=46.10	R11=230.50 */
                        { 6.54331, 0.720110, 3.252309, 2.492823, -2.014337, -0.838863, -0.352633, -0.023281, -0.231721, -0.121826, -4.837407, -1.129209},
                        /* Normal -K	L=0.340000	R00=48.60	R11=243.00 */
                        { 6.46229, 0.711181, 3.167774, 2.433509, -1.957298, -0.828891, -0.348483, -0.022737, -0.225067, -0.118254, -4.718556, -1.130061},
                        /* Normal -K	L=0.345000	R00=51.10	R11=255.50 */
                        { 6.38922, 0.703291, 3.089535, 2.378836, -1.904185, -0.819788, -0.344663, -0.022256, -0.218866, -0.114925, -4.608573, -1.131519},
                        /* Normal -K	L=0.350000	R00=53.60	R11=268.00 */
                        { 6.32312, 0.696317, 3.016849, 2.328253, -1.854540, -0.811448, -0.341130, -0.021830, -0.213064, -0.111811, -4.506409, -1.133511},

                };
        float LQROutBuf[2] = {0};
        float LQRXerrorBuf[6] = {0};
        float MatLQRNegK_fly[12] = {0};

        arm_matrix_instance_f32 *LQRXRefX;
        arm_matrix_instance_f32 *LQRXObsX;


        arm_matrix_instance_f32 MatLQRNegK = {2, 6, (float *) LQRKbuf[0]};
        arm_matrix_instance_f32 MatLQRErrX = {6, 1, LQRXerrorBuf};
        arm_matrix_instance_f32 MatLQROutU = {2, 1, LQROutBuf};


    public:

        /*Calculate X. Output is u (T,Tp)`*/
        void LQRCal(float *Tout) {
            //Calculate error
            arm_mat_sub_f32(this->LQRXObsX, this->LQRXRefX, &this->MatLQRErrX);
            //Calculate output value
            arm_mat_mult_f32(&this->MatLQRNegK, &this->MatLQRErrX, &this->MatLQROutU);
            //return Value
            Tout[0] = this->LQROutBuf[0];
            Tout[1] = this->LQROutBuf[1];
        }

        /*
            SetLQR -K paramaters
            LegLenth : Really length of leg
            isFly	 : Is robot in the sky, should compare with offground detection
        */
        void RefreshLQRK(float LegLenth, uint8_t isFly) {
            LegLenth = (LegLenth < LQR_MIN_LEN_CTRL) ? LQR_MIN_LEN_CTRL : LegLenth;
            LegLenth = (LegLenth > LQR_MAX_LEN_CTRL) ? LQR_MAX_LEN_CTRL : LegLenth;
            volatile uint8_t ID = roundf((LegLenth - LQR_MIN_LEN_CTRL) / LQR_LEN_RESOLUTION);
            ID_T = ID;
            if (isFly) {
                MatLQRNegK_fly[6] = LQRKbuf[ID][6];
                MatLQRNegK_fly[7] = LQRKbuf[ID][7];
                this->MatLQRNegK.pData = (float *) MatLQRNegK_fly;
            } else {
                this->MatLQRNegK.pData = (float *) LQRKbuf[ID];
            }
        }

        /* Set LQR Error Variate*/
        void InitMatX(arm_matrix_instance_f32 *pMatXRef, arm_matrix_instance_f32 *pMatXObs) {
            this->LQRXRefX = pMatXRef;
            this->LQRXObsX = pMatXObs;
        }
    };

}
#endif